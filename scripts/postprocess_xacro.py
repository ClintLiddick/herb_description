#!/usr/bin/env python
from __future__ import print_function
import argparse, lxml.etree, urlparse, sys

def add_prefix(node, attribute, prefix):
    old_value = node.attrib[attribute]
    new_value = '{0}/{1}'.format(prefix, old_value)
    node.attrib[attribute] = new_value

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Postprocess URDF generated by SW2URDF.')
    parser.add_argument('--name', type=str, default=None, help='name of the generated xacro macro')
    parser.add_argument('--prefix', type=str, default='prefix', help='name of the prefix variable')
    parser.add_argument('--color', type=float, nargs=4, default=None, help='name of the prefix variable')
    parser.add_argument('--package', type=str, default=None, help='package that contains the meshes')
    parser.add_argument('input_path', type=str, help='input URDF file')
    parser.add_argument('output_path', type=str, nargs='?', help='output xacro file')
    args = parser.parse_args()

    prefix_var = '${' + args.prefix + '}'
    params = [ args.prefix ]
    xacro_ns = 'http://www.ros.org/wiki/xacro'

    # Load the input URDF.
    with open(args.input_path, 'r') as input_file:
        urdf = lxml.etree.parse(input_file)
        robot_xml = urdf.getroot()

    if args.name is None:
        args.name = robot_xml.attrib['name']

    # Wrap the entire URDF file in a macro tag.
    new_robot_xml = lxml.etree.Element('robot', name=args.name, nsmap={ 'xacro': xacro_ns })
    macro_xml = lxml.etree.SubElement(new_robot_xml, '{{{0}}}macro'.format(xacro_ns),
                                      name=args.name, params=' '.join(params))
    new_urdf = lxml.etree.ElementTree(new_robot_xml)

    children_xml = robot_xml.getchildren()
    for child_xml in children_xml:
        macro_xml.append(child_xml)

    # Add a prefix to the link names.
    for link_xml in new_urdf.findall('//link'):
        add_prefix(link_xml, 'name', prefix_var)

    # Add a prefix to the joint names.
    for joint_xml in new_urdf.findall('//joint'):
        add_prefix(joint_xml, 'name', prefix_var)
        add_prefix(joint_xml.find('parent'), 'link', prefix_var)
        add_prefix(joint_xml.find('child'), 'link', prefix_var)

    # Change the color of all links.
    if args.color is not None:
        for color_xml in new_urdf.findall('//color'):
            color_str = ' '.join(map(str, args.color))
            color_xml.attrib['rgba'] = color_str

    # Update any package-relative mesh paths.
    if args.package is not None:
        for mesh_xml in new_urdf.findall('//mesh'):
            old_url = urlparse.urlparse(mesh_xml.attrib['filename'])
            if old_url.scheme == 'package':
                new_url = (old_url.scheme, args.package, old_url.path,
                           old_url.params, old_url.query, old_url.fragment)
                mesh_xml.attrib['filename'] = urlparse.urlunparse(new_url)

    if args.output_path is None:
        lxml.etree.dump(new_robot_xml)
    else:
        with open(args.output_path, 'w') as output_file:
            new_urdf.write(output_file)
